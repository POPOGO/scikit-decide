(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{481:function(t,a,e){"use strict";e.r(a);var s=e(51),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"builders-domain-value"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#builders-domain-value"}},[t._v("#")]),t._v(" builders.domain.value")]),t._v(" "),e("p"),e("div",{staticClass:"table-of-contents"},[e("ul",[e("li",[e("a",{attrs:{href:"#rewards"}},[t._v("Rewards")])]),e("li",[e("a",{attrs:{href:"#positivecosts"}},[t._v("PositiveCosts")])])])]),e("p"),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("skdecide-summary")],1),t._v(" "),e("h2",{attrs:{id:"rewards"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rewards"}},[t._v("#")]),t._v(" Rewards")]),t._v(" "),e("p",[t._v("A domain must inherit this class if it sends rewards (positive and/or negative).")]),t._v(" "),e("h3",{attrs:{id:"check-value"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#check-value"}},[t._v("#")]),t._v(" check_value "),e("Badge",{attrs:{text:"Rewards",type:"tip"}})],1),t._v(" "),e("skdecide-signature",{attrs:{name:"check_value",sig:{params:[{name:"self"},{name:"value",annotation:"TransitionValue[D.T_value]"}],return:"bool"}}}),t._v(" "),e("p",[t._v("Check that a transition value is compliant with its reward specification.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),e("h4",{attrs:{id:"parameters"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("value")]),t._v(": The transition value to check.")])]),t._v(" "),e("h4",{attrs:{id:"returns"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#returns"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),e("p",[t._v("True if the transition value is compliant (False otherwise).")]),t._v(" "),e("h3",{attrs:{id:"check-value-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#check-value-2"}},[t._v("#")]),t._v(" _check_value "),e("Badge",{attrs:{text:"Rewards",type:"tip"}})],1),t._v(" "),e("skdecide-signature",{attrs:{name:"_check_value",sig:{params:[{name:"self"},{name:"value",annotation:"TransitionValue[D.T_value]"}],return:"bool"}}}),t._v(" "),e("p",[t._v("Check that a transition value is compliant with its reward specification.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),e("h4",{attrs:{id:"parameters-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parameters-2"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("value")]),t._v(": The transition value to check.")])]),t._v(" "),e("h4",{attrs:{id:"returns-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#returns-2"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),e("p",[t._v("True if the transition value is compliant (False otherwise).")]),t._v(" "),e("h2",{attrs:{id:"positivecosts"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#positivecosts"}},[t._v("#")]),t._v(" PositiveCosts")]),t._v(" "),e("p",[t._v("A domain must inherit this class if it sends only positive costs (i.e. negative rewards).")]),t._v(" "),e("p",[t._v("Having only positive costs is a required assumption for certain solvers to work, such as classical planners.")]),t._v(" "),e("h3",{attrs:{id:"check-value-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#check-value-3"}},[t._v("#")]),t._v(" check_value "),e("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),e("skdecide-signature",{attrs:{name:"check_value",sig:{params:[{name:"self"},{name:"value",annotation:"TransitionValue[D.T_value]"}],return:"bool"}}}),t._v(" "),e("p",[t._v("Check that a transition value is compliant with its reward specification.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("This function returns always True by default because any kind of reward should be accepted at this level.")])]),t._v(" "),e("h4",{attrs:{id:"parameters-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parameters-3"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("value")]),t._v(": The transition value to check.")])]),t._v(" "),e("h4",{attrs:{id:"returns-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#returns-3"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),e("p",[t._v("True if the transition value is compliant (False otherwise).")]),t._v(" "),e("h3",{attrs:{id:"check-value-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#check-value-4"}},[t._v("#")]),t._v(" _check_value "),e("Badge",{attrs:{text:"Rewards",type:"warn"}})],1),t._v(" "),e("skdecide-signature",{attrs:{name:"_check_value",sig:{params:[{name:"self"},{name:"value",annotation:"TransitionValue[D.T_value]"}],return:"bool"}}}),t._v(" "),e("p",[t._v("Check that a transition value is compliant with its cost specification (must be positive).")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("This function calls "),e("code",[t._v("PositiveCost._is_positive()")]),t._v(" to determine if a value is positive (can be overridden for\nadvanced value types).")])]),t._v(" "),e("h4",{attrs:{id:"parameters-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parameters-4"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("value")]),t._v(": The transition value to check.")])]),t._v(" "),e("h4",{attrs:{id:"returns-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#returns-4"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),e("p",[t._v("True if the transition value is compliant (False otherwise).")]),t._v(" "),e("h3",{attrs:{id:"is-positive"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#is-positive"}},[t._v("#")]),t._v(" _is_positive "),e("Badge",{attrs:{text:"PositiveCosts",type:"tip"}})],1),t._v(" "),e("skdecide-signature",{attrs:{name:"_is_positive",sig:{params:[{name:"self"},{name:"cost",annotation:"D.T_value"}],return:"bool"}}}),t._v(" "),e("p",[t._v("Determine if a value is positive (can be overridden for advanced value types).")]),t._v(" "),e("h4",{attrs:{id:"parameters-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#parameters-5"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("cost")]),t._v(": The cost to evaluate.")])]),t._v(" "),e("h4",{attrs:{id:"returns-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#returns-5"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),e("p",[t._v("True if the cost is positive (False otherwise).")])],1)}),[],!1,null,null,null);a.default=r.exports}}]);